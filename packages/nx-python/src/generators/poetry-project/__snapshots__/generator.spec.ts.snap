// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`application generator > as-provided > should run successfully minimal configuration 1`] = `
{
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "my-app-test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "src/app/test",
  "sourceRoot": "src/app/test/my_app_test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "src/app/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "src/app/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > as-provided > should run successfully minimal configuration 2`] = `
"# my-app-test

Project description here.
"
`;

exports[`application generator > as-provided > should run successfully minimal configuration 3`] = `
"[tool.poetry]
name = "my-app-test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "my_app_test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > as-provided > should run successfully minimal configuration 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello my-app-test"
"
`;

exports[`application generator > as-provided > should run successfully minimal configuration 5`] = `
"3.9.7
"
`;

exports[`application generator > as-provided > should run successfully minimal configuration without directory 1`] = `
{
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "name": "my-app-test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "my-app-test",
  "sourceRoot": "my-app-test/my_app_test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "my-app-test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "my-app-test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > as-provided > should run successfully minimal configuration without directory 2`] = `
"# my-app-test

Project description here.
"
`;

exports[`application generator > as-provided > should run successfully minimal configuration without directory 3`] = `
"[tool.poetry]
name = "my-app-test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "my_app_test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > as-provided > should run successfully minimal configuration without directory 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello my-app-test"
"
`;

exports[`application generator > as-provided > should run successfully minimal configuration without directory 5`] = `
"3.9.7
"
`;

exports[`application generator > custom template dir > should run successfully with custom template dir 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > custom template dir > should run successfully with custom template dir 2`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"
  autopep8 = "^1.5.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > custom template dir > should run successfully with custom template dir 3`] = `
"[virtualenvs]
in-project = true
"
`;

exports[`application generator > individual package > should run successfully minimal configuration 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully minimal configuration 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully minimal configuration 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully minimal configuration 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully minimal configuration 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully minimal configuration as a library 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "library",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "libs/test",
  "sourceRoot": "libs/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "libs/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "libs/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully minimal configuration as a library 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully minimal configuration as a library 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully minimal configuration as a library 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully minimal configuration as a library 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully minimal configuration custom directory 1`] = `
{
  "$schema": "../../../node_modules/nx/schemas/project-schema.json",
  "name": "subdir-test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/subdir/test",
  "sourceRoot": "apps/subdir/test/subdir_test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/subdir/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/subdir/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully minimal configuration custom directory 2`] = `
"# subdir-test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully minimal configuration custom directory 3`] = `
"[tool.poetry]
name = "subdir-test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "subdir_test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully minimal configuration custom directory 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello subdir-test"
"
`;

exports[`application generator > individual package > should run successfully minimal configuration custom directory 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully minimal configuration with tags 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [
    "one",
    "two",
  ],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully minimal configuration with tags 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully minimal configuration with tags 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully minimal configuration with tags 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully minimal configuration with tags 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with flake8 linter 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies]
  autopep8 = "2.3.1"
  flake8 = "7.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html coverage report 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html coverage report 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html coverage report 3`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-report html:'../../coverage/apps/test/html'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies]
  autopep8 = "2.3.1"
  flake8 = "7.1.1"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"
  pytest-cov = "6.0.0"
  pytest-html = "4.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html coverage report 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html coverage report 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html coverage report 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html coverage report 7`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports 3`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies]
  autopep8 = "2.3.1"
  flake8 = "7.1.1"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"
  pytest-cov = "6.0.0"
  pytest-html = "4.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports 7`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports and threshold 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports and threshold 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports and threshold 3`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies]
  autopep8 = "2.3.1"
  flake8 = "7.1.1"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"
  pytest-cov = "6.0.0"
  pytest-html = "4.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports and threshold 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports and threshold 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports and threshold 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports and threshold 7`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit report 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit report 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit report 3`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --junitxml='../../reports/apps/test/unittests/junit.xml'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies]
  autopep8 = "2.3.1"
  flake8 = "7.1.1"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"
  pytest-cov = "6.0.0"
  pytest-html = "4.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit report 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit report 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit report 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit report 7`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit,html report 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit,html report 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit,html report 3`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --html='../../reports/apps/test/unittests/html/index.html' --junitxml='../../reports/apps/test/unittests/junit.xml'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies]
  autopep8 = "2.3.1"
  flake8 = "7.1.1"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"
  pytest-cov = "6.0.0"
  pytest-html = "4.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit,html report 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit,html report 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit,html report 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with html,xml coverage reports, threshold and junit,html report 7`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with no reports 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with no reports 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with no reports 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies]
  autopep8 = "2.3.1"
  flake8 = "7.1.1"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with no reports 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with no reports 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with no reports 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with flake8 linter and pytest with no reports 7`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 3`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --html='../../reports/apps/test/unittests/html/index.html' --junitxml='../../reports/apps/test/unittests/junit.xml'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies.shared-dev-lib]
  path = "../../libs/shared/dev-lib"
  develop = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 7`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 8`] = `
"# shared-dev-lib

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 9`] = `
"[tool.poetry]
name = "shared-dev-lib"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = "Proprietary"
readme = "README.md"

  [[tool.poetry.packages]]
  include = "shared_dev_lib"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"
  flake8 = "7.1.1"
  autopep8 = "2.3.1"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"
  pytest-cov = "6.0.0"
  pytest-html = "4.1.1"

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 10`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello shared-dev-lib"
"
`;

exports[`application generator > individual package > should run successfully with linting (flake8) and testing options with a dev dependency project 11`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "format": {
      "cache": true,
      "executor": "@nxlv/python:ruff-format",
      "options": {
        "filePatterns": [
          "test",
          "tests",
        ],
      },
      "outputs": [],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:ruff-check",
      "options": {
        "lintFilePatterns": [
          "test",
          "tests",
        ],
      },
      "outputs": [],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 3`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --html='../../reports/apps/test/unittests/html/index.html' --junitxml='../../reports/apps/test/unittests/junit.xml'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies.shared-dev-lib]
  path = "../../libs/shared/dev-lib"
  develop = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 6`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 7`] = `
"# shared-dev-lib

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 8`] = `
"[tool.poetry]
name = "shared-dev-lib"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = "Proprietary"
readme = "README.md"

  [[tool.poetry.packages]]
  include = "shared_dev_lib"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"
  ruff = "0.8.2"
  autopep8 = "2.3.1"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"
  pytest-cov = "6.0.0"
  pytest-html = "4.1.1"

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 9`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello shared-dev-lib"
"
`;

exports[`application generator > individual package > should run successfully with linting (ruff) and testing options with a dev dependency project 10`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with a dev dependency project with custom package name 1`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --html='../../reports/apps/test/unittests/html/index.html' --junitxml='../../reports/apps/test/unittests/junit.xml'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies.custom-shared-dev-lib]
  path = "../../libs/shared/dev-lib"
  develop = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:flake8",
      "options": {
        "outputFile": "reports/apps/test/pylint.txt",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/pylint.txt",
      ],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 3`] = `
"[tool.coverage.run]
branch = true
source = [ "test" ]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov --cov-fail-under=100 --cov-report html:'../../coverage/apps/test/html' --cov-report xml:'../../coverage/apps/test/coverage.xml' --html='../../reports/apps/test/unittests/html/index.html' --junitxml='../../reports/apps/test/unittests/junit.xml'"

[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies.shared-dev-lib]
  path = "../../libs/shared/dev-lib"
  develop = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 6`] = `
"[flake8]
exclude =
	.git,
	__pycache__,
	build,
	dist,
	.tox,
	venv,
	.venv,
	.pytest_cache
max-line-length = 120
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 7`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 8`] = `
"# shared-dev-lib

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 9`] = `
"[tool.poetry]
name = "shared-dev-lib"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = "Proprietary"
readme = "README.md"

  [[tool.poetry.packages]]
  include = "shared_dev_lib"

  [tool.poetry.dependencies]
  python = ">=3.9,<3.11"
  autopep8 = "^1.0.0"
  pytest = "^1.0.0"
  pytest-sugar = "^1.0.0"
  pytest-cov = "^1.0.0"
  pytest-html = "^1.0.0"
  flake8 = "^1.0.0"
  flake8-isort = "^1.0.0"

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 10`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello shared-dev-lib"
"
`;

exports[`application generator > individual package > should run successfully with linting and testing options with an existing dev dependency project 11`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with ruff linter 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "format": {
      "cache": true,
      "executor": "@nxlv/python:ruff-format",
      "options": {
        "filePatterns": [
          "test",
        ],
      },
      "outputs": [],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:ruff-check",
      "options": {
        "lintFilePatterns": [
          "test",
        ],
      },
      "outputs": [],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with ruff linter 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with ruff linter 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "dist",
]

line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
  # pycodestyle
  "E",
  # Pyflakes
  "F",
  # pyupgrade
  "UP",
  # flake8-bugbear
  "B",
  # flake8-simplify
  "SIM",
  # isort
  "I",
]
ignore = []

fixable = ["ALL"]
unfixable = []
"
`;

exports[`application generator > individual package > should run successfully with ruff linter 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with ruff linter 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with ruff linter and pytest with no reports 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "format": {
      "cache": true,
      "executor": "@nxlv/python:ruff-format",
      "options": {
        "filePatterns": [
          "test",
          "tests",
        ],
      },
      "outputs": [],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lint": {
      "cache": true,
      "executor": "@nxlv/python:ruff-check",
      "options": {
        "lintFilePatterns": [
          "test",
          "tests",
        ],
      },
      "outputs": [],
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "test": {
      "cache": true,
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry run pytest tests/",
        "cwd": "apps/test",
      },
      "outputs": [
        "{workspaceRoot}/reports/apps/test/unittests",
        "{workspaceRoot}/coverage/apps/test",
      ],
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > individual package > should run successfully with ruff linter and pytest with no reports 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > individual package > should run successfully with ruff linter and pytest with no reports 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

  [tool.poetry.group.dev.dependencies]
  autopep8 = "2.3.1"
  ruff = "0.8.2"
  pytest = "8.3.4"
  pytest-sugar = "1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "dist",
]

line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
  # pycodestyle
  "E",
  # Pyflakes
  "F",
  # pyupgrade
  "UP",
  # flake8-bugbear
  "B",
  # flake8-simplify
  "SIM",
  # isort
  "I",
]
ignore = []

fixable = ["ALL"]
unfixable = []
"
`;

exports[`application generator > individual package > should run successfully with ruff linter and pytest with no reports 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > individual package > should run successfully with ruff linter and pytest with no reports 5`] = `
"3.9.7
"
`;

exports[`application generator > individual package > should run successfully with ruff linter and pytest with no reports 6`] = `
""""Hello unit test module."""

from test.hello import hello


def test_hello():
    """Test the hello function."""
    assert hello() == "Hello test"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options (poetry 2.0.0) 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options (poetry 2.0.0) 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options (poetry 2.0.0) 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options (poetry 2.0.0) 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options (poetry 2.0.0) 5`] = `
"3.9.7
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options (poetry 2.0.0) 6`] = `
"[tool.poetry]
name = "workspace"

  [tool.poetry.dependencies]
  python = ">=3.9,<3.11"

    [tool.poetry.dependencies.test]
    path = "apps/test"
    develop = true

[tool.poetry.group.dev.dependencies]
autopep8 = "2.3.1"

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options 5`] = `
"3.9.7
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options 6`] = `
"[tool.poetry]
name = "workspace"

  [tool.poetry.dependencies]
  python = ">=3.9,<3.11"

    [tool.poetry.dependencies.test]
    path = "apps/test"
    develop = true

[tool.poetry.group.dev.dependencies]
autopep8 = "2.3.1"

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with custom rootPyprojectDependencyGroup 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with custom rootPyprojectDependencyGroup 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with custom rootPyprojectDependencyGroup 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with custom rootPyprojectDependencyGroup 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with custom rootPyprojectDependencyGroup 5`] = `
"3.9.7
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with custom rootPyprojectDependencyGroup 6`] = `
"[tool.poetry]
name = "workspace"

  [tool.poetry.dependencies]
  python = ">=3.9,<3.11"

[tool.poetry.group.dev.dependencies]
autopep8 = "2.3.1"

  [tool.poetry.group.dev.dependencies.test]
  path = "apps/test"
  develop = true

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with existing custom rootPyprojectDependencyGroup 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with existing custom rootPyprojectDependencyGroup 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with existing custom rootPyprojectDependencyGroup 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with existing custom rootPyprojectDependencyGroup 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with existing custom rootPyprojectDependencyGroup 5`] = `
"3.9.7
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options with existing custom rootPyprojectDependencyGroup 6`] = `
"[tool.poetry]
name = "workspace"

  [tool.poetry.dependencies]
  python = ">=3.9,<3.11"

[tool.poetry.group.dev.dependencies]
flake8 = "6.0.0"
autopep8 = "2.3.1"

  [tool.poetry.group.dev.dependencies.test]
  path = "apps/test"
  develop = true

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options without rootPyprojectDependencyGroup 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test",
  "projectType": "application",
  "release": {
    "version": {
      "generator": "@nxlv/python:release-version",
    },
  },
  "root": "apps/test",
  "sourceRoot": "apps/test/test",
  "tags": [],
  "targets": {
    "add": {
      "executor": "@nxlv/python:add",
      "options": {},
    },
    "build": {
      "cache": true,
      "executor": "@nxlv/python:build",
      "options": {
        "bundleLocalDependencies": false,
        "lockedVersions": false,
        "outputPath": "apps/test/dist",
        "publish": false,
      },
      "outputs": [
        "{projectRoot}/dist",
      ],
    },
    "install": {
      "executor": "@nxlv/python:install",
      "options": {
        "args": "",
        "cacheDir": ".cache/pypoetry",
        "debug": false,
        "silent": false,
        "verbose": false,
      },
    },
    "lock": {
      "executor": "@nxlv/python:run-commands",
      "options": {
        "command": "poetry lock --no-update",
        "cwd": "apps/test",
      },
    },
    "remove": {
      "executor": "@nxlv/python:remove",
      "options": {},
    },
    "update": {
      "executor": "@nxlv/python:update",
      "options": {},
    },
  },
}
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options without rootPyprojectDependencyGroup 2`] = `
"# test

Project description here.
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options without rootPyprojectDependencyGroup 3`] = `
"[tool.poetry]
name = "test"
version = "1.0.0"
description = "Automatically generated by Nx."
authors = [ ]
license = 'Proprietary'
readme = 'README.md'

  [[tool.poetry.packages]]
  include = "test"

  [tool.poetry.dependencies]
  python = ">=3.9,<4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options without rootPyprojectDependencyGroup 4`] = `
""""Sample Hello World application."""


def hello():
    """Return a friendly greeting."""
    return "Hello test"
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options without rootPyprojectDependencyGroup 5`] = `
"3.9.7
"
`;

exports[`application generator > shared virtual environment > should run successfully with minimal options without rootPyprojectDependencyGroup 6`] = `
"[tool.poetry]
name = "workspace"

  [tool.poetry.dependencies]
  python = ">=3.9,<3.11"

    [tool.poetry.dependencies.test]
    path = "apps/test"
    develop = true

[tool.poetry.group.dev.dependencies]
autopep8 = "2.3.1"

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;
